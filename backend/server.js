const express = require('express');
const bodyParser = require('body-parser');
const cors = require('cors');
const mongoose = require('mongoose');
const bcrypt = require('bcrypt');
const axios = require('axios');

const app = express();
const PORT = 3000;

// Connexion √† MongoDB
mongoose.connect('mongodb://localhost:27017/streamlitDB', {
  useNewUrlParser: true,
  useUnifiedTopology: true,
});

// Sch√©ma utilisateur
const userSchema = new mongoose.Schema({
  nom: String,
  email: { type: String, unique: true },
  mot_de_passe_hash: String,
  date_inscription: { type: Date, default: Date.now },
});

const User = mongoose.model('User', userSchema);

// Middleware
app.use(bodyParser.json());
app.use(cors({
  origin: 'http://localhost:4200', // Autorise les requ√™tes depuis Angular
  methods: ['GET', 'POST', 'PUT', 'DELETE'], // Autorise les m√©thodes HTTP
  allowedHeaders: ['Content-Type', 'Authorization'] // Autorise les en-t√™tes
}));

// Route pour l'inscription
app.post('/api/auth/register', async (req, res) => {
  const { nom, email, mot_de_passe } = req.body;

  // V√©rifier si l'email est d√©j√† utilis√©
  const existingUser = await User.findOne({ email });
  if (existingUser) {
    return res.status(400).json({ message: 'Cet email est d√©j√† utilis√©.' });
  }

  // Hasher le mot de passe
  const mot_de_passe_hash = await bcrypt.hash(mot_de_passe, 10);

  // Cr√©er un nouvel utilisateur
  const newUser = new User({ nom, email, mot_de_passe_hash });
  await newUser.save();

  res.status(201).json({ message: 'Inscription r√©ussie.', user: newUser });
});

// Route pour la connexion
app.post('/api/auth/login', async (req, res) => {
  const { email, mot_de_passe } = req.body;

  // Trouver l'utilisateur par email
  const user = await User.findOne({ email });
  if (!user) {
    return res.status(400).json({ message: 'Email incorrect.' });
  }

  // V√©rifier le mot de passe
  const isPasswordValid = await bcrypt.compare(mot_de_passe, user.mot_de_passe_hash);
  if (!isPasswordValid) {
    return res.status(400).json({ message: 'Mot de passe incorrect.' });
  }

  res.status(200).json({ message: 'Connexion r√©ussie.', user });
});

// Route pour g√©n√©rer un quiz
app.post('/api/quiz/generate', async (req, res) => {
  const { niveau, matiere, sous_sujet, nombre_questions } = req.body;

  const prompt = `
    Tu es un professeur sp√©cialis√© en ${matiere} pour le niveau ${niveau}.  
    Le sous-sujet actuel est : ${sous_sujet}.
    Ton objectif est de g√©n√©rer ${nombre_questions} questions adapt√©es √† ce niveau et √† ce sous-sujet.  

    **R√®gles √† suivre :**  
    1. Les questions doivent √™tre en fran√ßais.  
    2. Si tu fais r√©f√©rence √† une image ou √† un √©l√©ment visuel, d√©cris-le textuellement.  
    3. Chaque question doit √™tre claire, concise et adapt√©e au niveau sp√©cifi√©.  
    4. Formate chaque question comme suit :  
       - "Q1: [√©nonc√© de la question] ?"  
       - "Q2: [√©nonc√© de la question] ?"  
       - "Q3: [√©nonc√© de la question] ?"  
       - ...  
    5. **Ne montre pas ton processus de r√©flexion. Va directement aux questions.**  
    6. Arr√™te-toi exactement apr√®s avoir g√©n√©r√© le nombre de questions demand√© (${nombre_questions}).  
    7. Ne d√©passe pas le nombre de questions demand√©.  
  `;

  try {
    const response = await axios.post('http://localhost:11434/api/generate', {
      model: 'deepseek-r1:14b',
      prompt: prompt,
      stream: false,
      options: {
        temperature: 0.7,
        top_p: 0.9,
        num_predict: 5000
      }
    });

    const questions = response.data.response.split('\n').filter(q => q.trim().startsWith('Q') && q.includes('?'));
    res.status(200).json({ questions });
  } catch (error) {
    console.error('Erreur lors de la g√©n√©ration du quiz :', error);
    res.status(500).json({ message: 'Erreur lors de la g√©n√©ration du quiz.' });
  }
});






app.post('/api/quiz/feedback', async (req, res) => {
  const { questions, reponses_utilisateur } = req.body;

  const feedback_prompt = `
    üéØ **R√®gles :**
    - Tu es un assistant d'√©cole primaire.
    - **R√©ponds uniquement en fran√ßais**.
    - Pour chaque question :
    1. Si la r√©ponse est correcte ‚Üí F√©licite.
    2. Si la r√©ponse est incorrecte ‚Üí Explique en termes simples et identifie la lacune de l'√©l√®ve.
    3. Pas de pr√©ambule comme "Alright, Let's..." ou "Bon, je dois..."
    4. Ne montre pas ton processus de r√©flexion interne.
    5. Ne montre pas la balise "<think>...</think>"
    6. Va directement aux corrections ou f√©licitations.
  `;

  // Ajouter les questions et r√©ponses de l'utilisateur au prompt
  feedback_prompt += "Voici les r√©ponses d'un √©l√®ve :\n";
  for (let i = 0; i < questions.length; i++) {
    feedback_prompt += `${questions[i]}\nR√©ponse de l'√©l√®ve: ${reponses_utilisateur[i]}\n`;
  }

  try {
    const response = await axios.post('http://localhost:11434/api/generate', {
      model: 'deepseek-r1:14b',
      prompt: feedback_prompt,
      stream: false,
      options: {
        temperature: 0.7,
        top_p: 0.9,
        num_predict: 5000
      }
    });

    const feedback = response.data.response;
    res.status(200).json({ feedback });
  } catch (error) {
    console.error('Erreur lors de la g√©n√©ration du feedback :', error);
    res.status(500).json({ message: 'Erreur lors de la g√©n√©ration du feedback.' });
  }
});







// D√©marrer le serveur
app.listen(PORT, () => {
  console.log(`Serveur backend en cours d'ex√©cution sur http://localhost:${PORT}`);
});


